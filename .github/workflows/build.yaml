name: Publish release

on:
  pull_request:
    types: [opened, reopened, synchronize]
  push:
    branches: [main]
    paths-ignore: ["**.md"]

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  release-info:
    name: Generate release info
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    outputs:
      version: ${{ steps.generate.outputs.version }}
      changelog: ${{ steps.generate.outputs.changelog }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install tooling
        uses: jdx/mise-action@v2
      - name: Generate release info
        id: generate
        run: |
          version="$(git-cliff --bumped-version)"
          echo "version=$version" >>"$GITHUB_OUTPUT"
          echo "Bumped version: $version"
          changelog="$(git-cliff \
            --tag "$version" \
            --github-repo "${{ github.repository }}" \
            --github-token "${{ secrets.GITHUB_TOKEN }}" \
            --unreleased \
            --strip all \
            -v)"
          echo "changelog<<EOF" >>"$GITHUB_OUTPUT"
          echo "$changelog" >>"$GITHUB_OUTPUT"
          echo "EOF" >>"$GITHUB_OUTPUT"

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo -n "PR comment with release info: "
            if [[ -n "$changelog" ]]; then
              pr_comment="# :pencil: Changelog preview
          Below is a preview of the Changelog that will be added to the next release. \
          Only commit messages that follow the [Conventional Commits specification](https://www.conventionalcommits.org/) will be included in the Changelog.

          $changelog"
            else
              pr_comment="# :disappointed: No release for you
          There are no commits in your branch that follow the [Conventional Commits specification](https://www.conventionalcommits.org/), so no release will be created.

          If you want to create a release from this pull request, please reword your commit messages to replace this message with a preview of a beautiful Changelog."
            fi

            echo -e "$pr_comment" | gh pr comment "${{ github.event.number }}" \
              --edit-last --create-if-none \
              --repo "${{ github.repository }}" \
              --body-file=-
          fi

  checks:
    strategy:
      matrix:
        mise_task: [deadcode, vulncheck, ci-fmt, staticcheck, test, vet]
    name: |
      Run mise task: ${{ matrix.mise_task }}
    needs: [release-info]
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install tooling
        uses: jdx/mise-action@v2
        with:
          cache: false
      - name: mise run ${{ matrix.mise_task }}
        run: mise run ${{ matrix.mise_task }}

  builds:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        arch: [amd64, arm64]
        os: [linux, darwin]
    name: Generate binary for ${{ matrix.os }}-${{ matrix.arch }}
    needs: [release-info]
    steps:
      - name: Checkout latest code
        uses: actions/checkout@v4
      - name: Install tooling
        uses: jdx/mise-action@v2
        with:
          cache: false
      - name: Build binary
        run: |
          ./script/completions.sh

          export VERSION="${{ needs.release-info.outputs.version }}"
          export GOOS="${{ matrix.os }}"
          export GOARCH="${{ matrix.arch }}"
          mise run build

          binary="narc"

          tar -zcf "narc-cli_${{ needs.release-info.outputs.version }}_${{ matrix.os }}_${{ matrix.arch }}.tar.gz" ./completions -C bin/ "$binary"
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: archive-${{ matrix.os }}-${{ matrix.arch }}
          path: narc-cli_${{ needs.release-info.outputs.version }}_${{ matrix.os }}_${{ matrix.arch }}.tar.gz

  package-deb:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        arch: [amd64, arm64]
    name: Create Debian package for ${{ matrix.arch }}
    needs: [release-info]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install tooling
        uses: jdx/mise-action@v2
        with:
          cache: false
      - name: Create package
        run: |
          ./script/completions.sh

          export VERSION="${{ needs.release-info.outputs.version }}"
          export GOARCH="${{ matrix.arch }}"
          mise run package-deb
      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: deb-${{ matrix.arch }}
          path: narc-cli_${{ needs.release-info.outputs.version }}_${{ matrix.arch }}.deb

  # Used by GitHub to determine if all checks/builds have passed
  branch-protection-checkpoint:
    name: Branch protection checkpoint
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: [checks, builds, package-deb]
    steps:
      - name: Output status message
        run: echo "Checks and builds passed :rocket:"

  release-github:
    if: github.ref == 'refs/heads/main' && needs.release-info.outputs.changelog != ''
    runs-on: ubuntu-latest
    name: Create new tag and GitHub release
    permissions:
      contents: write
    needs: [release-info, builds, package-deb, checks]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Run Nix Installer
        uses: DeterminateSystems/nix-installer-action@v19
      - name: Create tag
        run: git tag ${{ needs.release-info.outputs.version }}
      - name: Download artifacts
        uses: actions/download-artifact@v5
      - name: Generate hashes
        id: hashes
        run: |
          echo '{}' > hashes.json
          version="${{ needs.release-info.outputs.version }}"

          for arch in amd64 arm64; do
            # Generate hashes for debs
            file="narc-cli_${version}_${arch}.deb"
            hash="$(nix-hash --type sha256 --flat "./deb-${arch}/${file}")"
            echo "$hash  $file" >> checksums.txt

            # Generate hashes for archives
            for os in linux darwin; do
              file="narc-cli_${version}_${os}_${arch}.tar.gz"
              hash16="$(nix-hash --type sha256 --flat "./archive-${os}-${arch}/${file}")"
              hash32="$(nix-hash --type sha256 --flat --base32 "./archive-${os}-${arch}/${file}")"
              echo "$hash16  $file" >> checksums.txt

              # This is used by the external release jobs (nur, homebrew)
              jq --arg os "$os" --arg arch "$arch" --arg encoding "base16" --arg hash "$hash16" '.[$os][$arch][$encoding] = $hash' hashes.json > new_hashes.json; mv {new_,}hashes.json
              jq --arg os "$os" --arg arch "$arch" --arg encoding "base32" --arg hash "$hash32" '.[$os][$arch][$encoding] = $hash' hashes.json > new_hashes.json; mv {new_,}hashes.json
            done
          done
      - name: Upload hashes
        uses: actions/upload-artifact@v4
        with:
          name: hashes-json
          path: hashes.json
      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.release-info.outputs.version }}
          body: ${{ needs.release-info.outputs.changelog }}
          prerelease: false
          files: |
            archive-linux-amd64/narc-cli_${{ needs.release-info.outputs.version }}_linux_amd64.tar.gz
            archive-linux-arm64/narc-cli_${{ needs.release-info.outputs.version }}_linux_arm64.tar.gz
            archive-darwin-amd64/narc-cli_${{ needs.release-info.outputs.version }}_darwin_amd64.tar.gz
            archive-darwin-arm64/narc-cli_${{ needs.release-info.outputs.version }}_darwin_arm64.tar.gz
            deb-amd64/narc-cli_${{ needs.release-info.outputs.version }}_amd64.deb
            deb-arm64/narc-cli_${{ needs.release-info.outputs.version }}_arm64.deb
            checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: |
          echo "## :rocket: Release ${{ needs.release-info.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "A new release is available over at https://github.com/${{ github.repository }}/releases/tag/${{ needs.release-info.outputs.version }}." >> $GITHUB_STEP_SUMMARY

  release-gar:
    if: github.ref == 'refs/heads/main'
    needs: [release-info, release-github]
    runs-on: ubuntu-latest
    name: Publish release on GAR
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.NAIS_IO_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: gh-narcos@nais-io.iam.gserviceaccount.com
          token_format: access_token
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      - name: Download arm64 deb artifacts
        uses: actions/download-artifact@v5
        with:
          name: deb-arm64
      - name: Download amd64 deb artifacts
        uses: actions/download-artifact@v5
        with:
          name: deb-amd64
      - name: Upload files to GAR
        env:
          VERSION: ${{ needs.release-info.outputs.version }}
        run: |
          gcloud --project nais-io artifacts apt upload nais-ppa --quiet --source narc-cli_${VERSION}_arm64.deb --location europe-north1
          gcloud --project nais-io artifacts apt upload nais-ppa --quiet --source narc-cli_${VERSION}_amd64.deb --location europe-north1

  release-external-repos:
    if: github.ref == 'refs/heads/main'
    needs: [release-info, release-github]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - template: nur.nix
            repo: nais/nur
            file: pkgs/narc-cli/default.nix
          - template: homebrew.rb
            repo: nais/homebrew-tap
            file: Formula/narc.rb
    name: Publish release to ${{ matrix.target.repo }}
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Generate installation access token
        uses: navikt/github-app-token-generator@v1
        id: token
        with:
          private-key: "${{ secrets.NAIS_APP_PRIVATE_KEY }}"
          app-id: "${{ secrets.NAIS_APP_ID }}"
          repo: ${{ matrix.target.repo }}
      - name: Download hashes
        uses: actions/download-artifact@v5
        with:
          name: hashes-json
      - name: Generate manifest
        run: |
          git clone "https://git:${{ steps.token.outputs.token }}@github.com/${{ matrix.target.repo }}" repo
          cd repo || exit 1
          mkdir -p "$(dirname "${{ matrix.target.file }}")"
          sed \
            -e "s/__VERSION__/${{ needs.release-info.outputs.version }}/g" \
            -e "s/__SHA_DARWIN_AMD64__/$(jq -r '.darwin.amd64.base16' ../hashes.json)/g" \
            -e "s/__SHA_DARWIN_ARM64__/$(jq -r '.darwin.arm64.base16' ../hashes.json)/g" \
            -e "s/__SHA_LINUX_AMD64__/$(jq -r '.linux.amd64.base16' ../hashes.json)/g" \
            -e "s/__SHA_LINUX_ARM64__/$(jq -r '.linux.arm64.base16' ../hashes.json)/g" \
            -e "s/__SHA_DARWIN_AMD64_BASE32__/$(jq -r '.darwin.amd64.base32' ../hashes.json)/g" \
            -e "s/__SHA_DARWIN_ARM64_BASE32__/$(jq -r '.darwin.arm64.base32' ../hashes.json)/g" \
            -e "s/__SHA_LINUX_AMD64_BASE32__/$(jq -r '.linux.amd64.base32' ../hashes.json)/g" \
            -e "s/__SHA_LINUX_ARM64_BASE32__/$(jq -r '.linux.arm64.base32' ../hashes.json)/g" \
            "../.github/workflows/templates/${{ matrix.target.template }}" \
            > "${{ matrix.target.file }}"

          git -c user.name='naisbot' -c user.email='bot@nais.io' commit -am "Bump narc-cli to ${{ needs.release-info.outputs.version }}"
          git push
